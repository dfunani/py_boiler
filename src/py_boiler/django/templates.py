README_CODE = """# {project_name}

A simple boilerplate generator for Django projects.

## Features
- Generate a ready-to-run Django app with one command
- Modern Python packaging (`pyproject.toml`)
- Pre-configured settings for rapid development
- Extensible for future Django boilerplates

## Quickstart
```bash
# Install dependencies
pip install -r requirements.txt

# Create New Migration
python manage.py makemigrations api

# Run migrations
python manage.py migrate

# Start the development server
python manage.py runserver

NOTE:
# Create Admin Superuser
uv run manage.py createsuperuser

# Start a new Django project
python manage.py startproject project_name

# Start a new App/Module/API
python manage.py startapp app_name
```

## Requirements
- Python 3.9+
- Django 4.x+

"""

MAIN_CODE = """\
#!/usr/bin/env python
\"\"\"Django's command-line utility for administrative tasks.\"\"\"

import os
import sys


def main():
    \"\"\"Run administrative tasks.\"\"\"
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "{project_name}.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

"""

ASGI_CODE = """\"\"\"
ASGI config for gradebook project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
\"\"\"

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gradebook.settings")

application = get_asgi_application()
"""

WSGI_CODE = """\"\"\"
WSGI config for gradebook project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
\"\"\"

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gradebook.settings")

application = get_wsgi_application()

"""

URLS_CODE = """\"\"\"
URL configuration for gradebook project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
\"\"\"

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/v1/", include("api.urls"))
]
"""

SETTINGS_CODE = """\"\"\"
Django settings for gradebook project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
\"\"\"

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-!4wc3b!8!6pgn=rnqljs9ws7w)kqy3%wka8a+v$t+01idiryu2"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = []


# Application definition

INSTALLED_APPS = [
    "api.apps.ApiConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "gradebook.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gradebook.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
"""

API_ADMIN_CODE = """from django.contrib import admin
from .models import *

# Register your models here.
admin.site.register(Person)
"""
API_APPS_CODE = """from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "api"
"""
API_MODELS_CODE = """from uuid import uuid4
from django.db import models


# Create your models here.
class Person(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    name = models.CharField(max_length=255)
    surname = models.CharField(max_length=255)
    dob = models.DateField()
    email = models.EmailField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self) -> str:
        return (
            f"Person: {self.name} {self.surname}, DOB: {self.dob}, email: {self.email}"
        )

    def __repr__(self) -> str:
        return f"Person(name={self.name}, surname={self.surname}, dob={self.dob}, email={self.email}, created_at={self.created_at}, updated_at={self.updated_at})"
"""
API_TESTS_CODE = """from django.test import TestCase

# Create your tests here.
"""
API_URLS_CODE = """from django.urls import path
from . import views

urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("health", views.HealthView.as_view(), name="health"),
    path("students", views.StudentsView.as_view(), name="students"),
    path("student/<str:student_id>", views.StudentView.as_view(), name="student"),
]
"""
API_VIEWS_CODE = """from uuid import UUID
from django.http import JsonResponse, HttpRequest
from django.views import View

from .models import Person


# Create your views here.
class IndexView(View):
    def get(self, request: HttpRequest) -> JsonResponse:
        print(request)
        return JsonResponse(
            {
                "service": "Grade Book API",
                "version": "1.0.0",
                "description": "Allows Management of Students.",
                "features": ["Student Management"],
                "supported_operations": [
                    "create_student",
                    "update_student",
                    "delete_student",
                ],
            }
        )


class HealthView(View):
    def get(self, request: HttpRequest) -> JsonResponse:
        return JsonResponse({"databases": "ACTIVE", "api": "ACTIVE"})


class StudentsView(View):
    model = Person

    def get(self, request: HttpRequest) -> JsonResponse:
        people = self.model.objects.all()
        return JsonResponse(
            data=[
                {
                    "name": person.name,
                    "surname": person.surname,
                    "email": person.email,
                    "dob": person.dob,
                }
                for person in people
            ],
            safe=False,
        )


class StudentView(View):
    model = Person

    def get(self, request: HttpRequest, student_id: str) -> JsonResponse:
        person = self.model.objects.filter(str(self.model.id) == student_id).first()
        if not person:
            return JsonResponse({
                "error": "Person Not Found"
            }, status_code=404)
        return JsonResponse(
            {
                "name": person.name,
                "surname": person.surname,
                "email": person.email,
                "dob": person.dob,
            }
        )
"""